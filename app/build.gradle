import static org.apache.tools.ant.taskdefs.condition.Os.FAMILY_WINDOWS
import static org.apache.tools.ant.taskdefs.condition.Os.isFamily

apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'

def keyStorePath
def keyStoreFile
def keyStoreConfig
if (isFamily(FAMILY_WINDOWS)) {
    keyStoreConfig = System.getenv('USERPROFILE') + File.separator + ".ssh" + File.separator +
            "playground.properties"
    keyStoreFile = System.getenv('USERPROFILE') + File.separator + ".ssh" + File.separator +
            "playground.jks"
} else {
//    keyStorePath = System.getenv('HOME') + "/.ssh/androidKeystore.properties"
    keyStoreConfig = System.getenv('HOME') + "/.ssh/playground.properties"
    keyStoreFile = System.getenv('HOME') + "/.ssh/playground.jks"
}

//if (System.properties['os.name'].toLowerCase().contains('windows')) {
//    keyStorePath = System.getenv('USERPROFILE') + File.separator + ".ssh"
//} else {
//    keyStorePath = System.getenv('HOME') + File.separator + '.ssh'
//}

//def keyStoreFile = keyStorePath + File.separator + 'playground.jks'
//def keyStoreConfig = keyStorePath + File.separator + 'playground.properties'

Properties props = new Properties()
if (new File(keyStoreConfig).exists()) {
    props.load(new FileInputStream(file(keyStoreConfig)))
}


def getDate() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC")) // 注意时区
}

def getRevision() {
    if (!System.getenv('CI_BUILD')) {
        return 0
    }
    return ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    compileOptions {
        sourceCompatibility rootProject.ext.android.javaVersion
        targetCompatibility rootProject.ext.android.javaVersion
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
//        manifestPlaceholders = [UMENG_APPKEY_VALUE : UMENG_APPKEY_RELEASE]
    }

    signingConfigs {

//        def KEYSTORE = file('../buildsystem/AndroidKeyStore.jks')
        debug {
            // metod1
            storeFile file(keyStoreFile)
            storePassword props.getProperty('STORE_PWD')
            keyAlias props.getProperty('KEY_ALIAS')
            keyPassword props.getProperty('KEY_PWD')

        }

        release {
            // method2  keystore placed in holder →  ../.ssh/
//            storeFile file(keyStoreFile)
//            storePassword props['KEYSTORE_PASSWORD']
//            keyAlias props['KEY_ALIAS']
//            keyPassword props['KEY_PASSWORD']

            storeFile file(keyStoreFile)
            storePassword props.getProperty('STORE_PWD')
            keyAlias props.getProperty('KEY_ALIAS')
            keyPassword props.getProperty('KEY_PWD')
        }
    }


    buildTypes {
        debug {
            versionNameSuffix "-debug"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
//            signingConfig signingConfigs.debug
//            manifestPlaceholders = [UMENG_APPKEY_VALUE : UMENG_APPKEY_DEBUG]
            buildConfigField "String", "UMENG_APPKEY", "\"${UMENG_APPKEY_DEBUG}\""
//            buildConfigField "String", "ENDPOINT", "\"${endpoint_product}\""
//            resValue "string", "umeng_appkey", "${UMENG_APPKEY_DEBUG}"
//            resValue "string", "deepshare_appid", "${deepshare_appid}"
//            resValue "string", "bugly_appid", "${bugly_appid_dev}"
//            resValue "string", "rong_appkey", "${rong_appkey}"
//            resValue "string", "channel", "dev"
//            resValue "string", "op_app_name", "dev_${app_name}"
        }
        release {
            versionNameSuffix "_release"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "UMENG_APPKEY", "\"${UMENG_APPKEY_RELEASE}\""

            // method 1   in xml  use %{} as the placeholder
//            manifestPlaceholders = [UMENG_APPKEY_VALUE:UMENG_APPKEY_RELEASE]
            // method 2   in xml use @string/value as the placeholder
//            resValue "string", "umeng_appkey", "${UMENG_APPKEY_RELEASE}"
            //在Java中通过BuildConfig.ENDPOINT调用
//            buildConfigField "String", "ENDPOINT", "\"${endpoint_product}\""
//            //在xml文件中通过R.string.key调用
//            resValue "string", "deepshare_appid", "${deepshare_appid}"
//            resValue "string", "bugly_appid", "${bugly_appid_product}"
//            resValue "string", "rong_appkey", "${rong_appkey}"
//            resValue "string", "channel", "product"
//            resValue "string", "op_app_name", "${app_name}"
        }
    }

    //解决三方库文件冲突
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude('META-INF/LICENSE.txt')
        exclude('META-INF/NOTICE.txt')
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/rxjava.properties'
        // umeng推送的jar包含有的okio库跟okhttp的okio库冲突
//        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
//        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
    }
    //lint检查
    lintOptions {
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        checkReleaseBuilds true
        disable "InvalidPackage"
        disable "MissingTranslation" // 禁用中英文string.xml的强制lint
        //配置信息在lint.xml中,需手动建立
//        lintConfig file("lint.xml")
    }
    // if exists override the defaultConfig ,or merge the defaultConfig
//    productFlavors {
//        dev{
//            applicationId "com.wptdxii.playground.dev"
//        }
//        product{}
//
//        rc_yingyongbao {}
//        rc_baidu {}
//        rc_360{}
//        arm {
//
//            ndk {
//                //引号内容要与jniLibs文件夹内的文件夹名相同
//                abiFilters "arm64-v8a", "armeabi", "armeabi-v7a"
//            }
//        }
//
//        x86 {
//            ndk {
//                abiFilters "x86", "x86_64"
//            }
//        }
//        mips {
//            ndk {
//                abiFilters "mips"
//            }
//        }
//    }

//    productFlavors.all { flavor ->
//        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }

    // 修改打包后APK的文件名
    //variant = flavor + buildType
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
//            def outputFile = output.outputFile
//            if (variant.buildType.name.equals('release')) {
//                // 输出apk名称为ap_v1.0_2016-04-12_yingyongbao_a23f2e1.apk
////                def releaseApkName = 'ap-v' + defaultConfig.versionName + '_' + getDate() + '_' + variant.productFlavors[0].name + "_" + getRevision() + '.apk'
//                def releaseApkName = 'ap-v' + defaultConfig.versionName + '_' + getDate() + '_' + getRevision() + '.apk'
//                output.outputFile = new File(outputFile.parent, releaseApkName)
//            }
//            if (variant.buildType.name.equals('debug')) {
//                // do nothing
//            }

//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = "ap_v${defaultConfig.versionName}_channel${variant.name}.apk"
//                output.outputFile = new File(outputFile.parent,fileName)
//            }
            outputFileName = "Playground-v${variant.versionName}.apk"
//            if (variant.buildType.name == 'debug') {
//                def outputPath = outputFileName
//                def debugApkName = "Playground_v${defaultConfig.versionName}_debug.apk"
//                outputFileName = new File(outputPath.parent, debugApkName)
//            }
//
//            if (variant.buildType.name == 'release') {
//                def outputPath = './buildsystem'
//                def releaseApkName = "Playground_v${defaultConfig.versionName}.apk"
//                outputFileName = new File(outputPath, releaseApkName)
//            }
        }
    }

}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
    google()
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    compile fileTree(include: ['*.jar'], dir: 'libs')
//    compile(name:'test', ext:'aar') arr文件放到libs目录下，'test'为arr文件名
    compile project(':ext')
    compile project(':data')
    compile project(':domain')
    compile project(':uikit')
    compile project(':uiframework')
    compile project(':im')
    compile project(':authorize')
    compile project(':share')
    compile project(':lbs')
    testCompile testDependencies.junit
    compile supportDependencies.v4
    compile supportDependencies.appCompat
    compile supportDependencies.design
    compile supportDependencies.annotations
    compile supportDependencies.constraint

    compile httpDependencies.retrofit
    compile httpDependencies.gsonConverter
    compile httpDependencies.rxAdapter
    compile httpDependencies.logInterceptor

    compile diDependencies.dagger
    annotationProcessor diDependencies.compiler

    compile butterKnifeDependencies.butterknife
    annotationProcessor butterKnifeDependencies.compiler

//    compile rootProject.ext.imageLoaderDependencies.glide
//    compile rootProject.ext.imageLoaderDependencies.compiler
//    compile rootProject.ext.imageLoaderDependencies.okhttpIntegration
//    compile (rootProject.ext.imageLoaderDependencies.recyclerViewIntegration) {
//        // Excludes the support library because it's already included by Glide.
//        transitive = false
//    }

    compile rootProject.ext.libFastJson
    compile rootProject.ext.libRxJava
    compile rootProject.ext.libRxAndroid
    compile rootProject.ext.libEventBus
    compile rootProject.ext.libGlide
//    compile rootProject.ext.libDagger
//    annotationProcessor rootProject.ext.libDaggerCompiler
    compile rootProject.ext.libJavaxAnnotation
//    debugCompile rootProject.ext.debugDependencies.leakCanary
//    releaseCompile rootProject.ext.releaseDependencies.leakCanary
//    debugCompile rootProject.ext.debugDependencies.blockCanary
//    releaseCompile rootProject.ext.releaseDependencies.blockCanary
    debugCompile rootProject.ext.debugDependencies.stetho
}
